# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: evgenkarlson <RTFM@42.fr>                  +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2020/02/14 12:33:14 by evgenkarlson      #+#    #+#              #
#    Updated: 2021/04/14 18:59:21 by evgenkarlson     ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#=================================================#
#            Имя нужной нам библиотеки            #
#=================================================#
NAME := libft.a

#=================================================#
#              Название компилятора               #
#=================================================#
CC := gcc

#=================================================#
#              Флаги для компиляции               #
#=================================================#
CFLAGS := -Wall -Werror -Wextra

#=================================================#
#               Папка с исходниками               #
#=================================================#
SRC_DIR := ./srcs/

#=================================================#
#        Исходные файлы и обьектные файлы         #
#=================================================#
SRC_FILES :=	ft_putchar.c \
				ft_putstr.c \
				ft_strcmp.c \
				ft_strlen.c \
				ft_swap.c

OBJ_FILES = $(SRC_FILES:.c=.o)

#=================================================#
#              Полные пути к файлам               #
#=================================================#
SRCS = $(addprefix $(SRC_DIR), $(SRC_FILES))
OBJS = $(addprefix $(SRC_DIR), $(OBJ_FILES))

#=================================================#
#            OBJS можно записть вот так           #
#=================================================#
# OBJS = $(patsubst %.c, %.o, $(SRCS))            #
# OBJS = $(SRCS:.c=.o)                            #
#=================================================#


#=================================================#
#      Флаг и папка с заголовочными файлами       #
#=================================================#
HEADER := -I includes/

#=================================================#
#   Программы создания файла библиотеки libft.a   #
#=================================================#
LIBC := ar rc
LIBR := ranlib

#=================================================#
# Программа для зачистки мусора
#=================================================#
RM := rm -f

#=================================================#
#                    Цвета                        #
#=================================================#
NOC         = \033[0m #non color
BOLD        = \033[1m
UNDERLINE   = \033[4m
BLACK       = \033[1;30m
RED         = \033[1;31m
GREEN       = \033[1;32m
YELLOW      = \033[1;33m
BLUE        = \033[1;34m
VIOLET      = \033[1;35m
CYAN        = \033[1;36m
WHITE       = \033[1;37m

#=================================================#
#                  Все правила                    #
#=================================================#
all: obj $(NAME)

#=================================================#
#          Компиляция обьектных файлов            #
#=================================================#
obj: $(SRCS)
	@echo "==============================================================="
	@echo "$(YELLOW)[  0%  ] (ﾉ◕ヮ◕)ﾉ*・ﾟ✧ \tCompiling... Wait a sec.$(NOC)"

$(SRC_DIR)%.o: $(SRC_DIR)%.c
	$(CC) $(CFLAGS) -c $< -o $@ $(HEADER)
#=================================================#
#   Другие варианты компиляции обьектных файлов   #
#=================================================#
# FLAGS = -Wall -Wextra -Werror                   #
#                                                 #
# obj: $(SRCS)                                    #
#                                                 #
# $(OBJ_DIR)%.o:$(SRC_DIR)%.c                     #
#	$(CC) $(FLAGS) $(HEADER) -o $@ -c $<          #
#=================================================#
# .c.o:                                           #
#	$(CC) $(CFLAGS) -c $< -o $(<:.c=.o) $(HEADER) #
#=================================================#
# FLAGS = -Wall -Wextra -Werror                   #
#                                                 #
# %.o: %.c                                        #
#	$(CC) -I $(INC) $< $(FLAGS) -o $@ -c          #
#                                                 #
# %.c : $(SRC)                                    #
#=================================================#
# FLAGS = -Wall -Wextra -Werror                   #
#                                                 #
# %.o:%.c                                         #
#	@gcc $(FLAGS) -o $@ -c $<                     #
#=================================================#

#=================================================#
# Сборка обьектных файлов в один архив-библиотеку #
#=================================================#
$(NAME): $(OBJS)
	$(LIBC) $(NAME) $(OBJS)
	$(LIBR) $(NAME)
	@echo "$(YELLOW)[ 100% ] (•̀ᴗ•́)و Compilation of '$(NAME)' is done$(NOC)"
	@echo "==============================================================="
	@echo "$(CYAN)>>>   CHECK LIBRARY. \033[0m"
	@echo "$(CYAN)Make sure the '$(NAME)' library works $(NOC)"
	@echo "$(CYAN)compile the test program using the generated libft.a library $(NOC)"
	$(CC) $(CFLAGS) -o program.out test.c $(NAME)
	@echo "==============================================================="
	@echo "$(CYAN)>>>   CHECK PROGRAM './test' $(NOC)"
	./program.out
	@echo "==============================================================="

#=================================================#
# Правило очистки от обьектных файлов
#=================================================#
clean:
	@echo "==============================================================="
	@echo "$(RED)¯\_(ツ)_/¯      Objects remove!$(NOC)"
	/bin/rm -f $(OBJS)
	@echo "==============================================================="

#=================================================#
# Правило очистки от обьектных файлов и файла библиотеки libft.a
#=================================================#
fclean: clean
	@echo "==============================================================="
	@echo "$(RED)(╯°□°）╯︵ ┻━┻  $(NAME) remove!$(NOC)"
	/bin/rm -f $(NAME) program.out
	@echo "==============================================================="

#=================================================#
# Правило зачистки от мусора и перезапуска всех   #
# правил заново                                   #
#=================================================#
re: fclean all


#=================================================#
# Правило которое говорит сборщику чтобы он не    #
# воспринимал правила из списка 'phony' за файлы  #
#=================================================#
.PHONY: all clean fclean re

#=================================================#
#      Проверка исходников на соблюдение норм     #
#=================================================#
# norm :
#	norminette -R CheckForbiddenSourceHeader */*.[ch]

#=================================================#
#     Распаковка обьектных файлов из libft.a      #
#=================================================#
# unzip:
#	ar -x libft.a




# Синтаксис make-файла очень простой:
###################################################
#                                                 #
#             цель: зависимости                   #
#                 команда                         #
#                                                 #
###################################################

# Например, рассмотрим следующее объявление:
###################################################
#                                                 #
#             hello.o: hello.c hello.h            #
#                 gcc -c $< -o $@                 #
#                                                 #
###################################################
#                                                 #
# В этом случае вы можете увидеть использование   #
# специальных макросов - автоматических перемен-  #
# ных '$@' и '$<'.                                #
#                                                 #
# hello.o            оценивается как    $@    - это имя файла цели.
# hello.c            оценивается как    $<    - это имя первой зависимости
# hello.c hello.h    оценивается как    $^    - это имена всех зависимостей
#                                                 #
# т.е переменная '$@' представляет собой желаемую #
# цель, а переменная '$<' представляет собой      #
# предварительное условие выполнения цели,        #
# которое необходимо для создания нашей цели -    #
# - выходного  файла(hello.o).                    #
#                                                 #
###################################################


###################################################
# Запустите эту команду, она выведет внутреннюю   #
# базу данных команды 'make':                     #
###################################################
#                                                 #
#                      make -p                    #
#                                                 #
###################################################



# #############################___P.S___#####################################
#                                                                           #
#                                                                           #
#  Сайт на котором я нашел полезную информацию по созданию Makefile:
#  http://rus-linux.net/nlib.php?name=/MyLDP/algol/gnu_make/gnu_make_3-79_russian_manual.html#SEC101
#                                                                           #
#                                                                           #
# ###########################################################################
#                                                                           #
#                                                                           #
#  Список всех этих специальных переменных в руководстве GNU Make:          #
#  https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html
#                                                                           #
#                                                                           #
#############################################################################
#                                                                           #
#                                                                           #
#  Для получения дополнительной информации вы можете прочитать эту статью о #
#  Linux Makefiles:                                                         #
#  https://linoxide.com/how-tos/learn-linux-makefiles/                      #
#                                                                           #
#                                                                           #
#############################################################################
